import pdb
from typing import List
from queue import Queue


class Solution:
    def remove_island(self, grid, o_height, o_widht):
        visit = set()
        sm_isles = Queue()
        sm_isles.put(tuple([o_height, o_widht]))

        while not sm_isles.empty():
            height, widht = sm_isles.get()
            if (height, widht) in visit:
                continue
            visit.add((height, widht))
            grid[height][widht] = "0"
            if height - 1 >= 0 and grid[height - 1][widht] == "1":
                sm_isles.put(tuple([height - 1, widht]))
            if height + 1 < len(grid) and grid[height + 1][widht] == "1":
                sm_isles.put(tuple([height + 1, widht]))
            if widht - 1 >= 0 and grid[height][widht - 1] == "1":
                sm_isles.put(tuple([height, widht - 1]))
            if widht + 1 < len(grid[0]) and grid[height][widht + 1] == "1":
                sm_isles.put(tuple([height, widht + 1]))

    def numIslands(self, grid: List[List[str]]) -> int:
        numb = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == "1":
                    numb += 1
                    self.remove_island(grid, i, j)
        return numb


sol = Solution()
assert sol.numIslands([
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]) == 1
#
#assert sol.numIslands([
#  ["1","1","0","0","0"],
#  ["1","1","0","0","0"],
#  ["0","0","1","0","0"],
#  ["0","0","0","1","1"]
#]) == 3
#
#assert sol.numIslands([
#    ["1","1","1"],
#    ["0","1","0"],
#    ["1","1","1"]
#]) == 1

print(sol.numIslands(
    [
        ["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],
        ["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],
        ["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],
        ["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],
        ["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
        ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]
    ]))
